{"ast":null,"code":"var _jsxFileName = \"/Users/madisonmccardle/PCA/javascipt/react/hacker-news-react-apollo/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { BrowserRouter } from 'react-router-dom';\nimport { setContext } from 'apollo-link-context'; // Apollo Links allow you to create middlewares that let you modify requests before they are sent to the server.\n\nimport { AUTH_TOKEN } from './constants';\nimport { split } from 'apollo-link';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000'\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem(AUTH_TOKEN);\n  return {\n    headers: { ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n}); // get the authentication token from localStorage if it exists; after that, we return the headers to the context so httpLink can read them\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000`,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authToken: localStorage.getItem(AUTH_TOKEN)\n    }\n  }\n});\nconst link = split(({\n  query\n}) => {\n  const {\n    kind,\n    operation\n  } = getMainDefinition(query);\n  return kind === 'OperationDefinition' && operation === 'subscription';\n}, wsLink, authLink.concat(httpLink));\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n});\nReactDOM.render(\n/*#__PURE__*/\n// <React.StrictMode>\n//   <App />\n// </React.StrictMode>,\nReact.createElement(BrowserRouter, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 7\n  }\n}))), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/madisonmccardle/PCA/javascipt/react/hacker-news-react-apollo/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","ApolloProvider","ApolloClient","createHttpLink","InMemoryCache","BrowserRouter","setContext","AUTH_TOKEN","split","WebSocketLink","getMainDefinition","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","wsLink","options","reconnect","connectionParams","authToken","link","query","kind","operation","concat","client","cache","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,oBAAP;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AAEA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,SAASC,UAAT,QAA2B,qBAA3B,C,CACA;;AACA,SAASC,UAAT,QAA2B,aAA3B;AAEA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AAEA,MAAMC,QAAQ,GAAGR,cAAc,CAAC;AAC9BS,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B;AAIA,MAAMC,QAAQ,GAAGP,UAAU,CAAC,CAACQ,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBX,UAArB,CAAd;AACA,SAAO;AACLQ,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFpC;AADJ,GAAP;AAMD,CAR0B,CAA3B,C,CASA;;AACA,MAAMI,MAAM,GAAG,IAAIX,aAAJ,CAAkB;AAC/BG,EAAAA,GAAG,EAAG,qBADyB;AAE/BS,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE,IADJ;AAEPC,IAAAA,gBAAgB,EAAE;AAChBC,MAAAA,SAAS,EAAEP,YAAY,CAACC,OAAb,CAAqBX,UAArB;AADK;AAFX;AAFsB,CAAlB,CAAf;AAUA,MAAMkB,IAAI,GAAGjB,KAAK,CAChB,CAAC;AAAEkB,EAAAA;AAAF,CAAD,KAAe;AACb,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAsBlB,iBAAiB,CAACgB,KAAD,CAA7C;AACA,SAAOC,IAAI,KAAK,qBAAT,IAAkCC,SAAS,KAAK,cAAvD;AACD,CAJe,EAKhBR,MALgB,EAMhBP,QAAQ,CAACgB,MAAT,CAAgBlB,QAAhB,CANgB,CAAlB;AASA,MAAMmB,MAAM,GAAG,IAAI5B,YAAJ,CAAiB;AAC9BuB,EAAAA,IAD8B;AAE9BM,EAAAA,KAAK,EAAE,IAAI3B,aAAJ;AAFuB,CAAjB,CAAf;AAKAN,QAAQ,CAACkC,MAAT;AAAA;AACE;AACA;AACA;AACA,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEF,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,CAJF,EASEG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CATF,E,CAYA;AACA;AACA;;AACAlC,aAAa,CAACmC,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker';\n\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { setContext } from 'apollo-link-context'\n// Apollo Links allow you to create middlewares that let you modify requests before they are sent to the server.\nimport { AUTH_TOKEN } from './constants'\n\nimport { split } from 'apollo-link'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000'\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN)\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  }\n})\n// get the authentication token from localStorage if it exists; after that, we return the headers to the context so httpLink can read them\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000`,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authToken: localStorage.getItem(AUTH_TOKEN),\n    }\n  }\n})\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query)\n    return kind === 'OperationDefinition' && operation === 'subscription'\n  },\n  wsLink,\n  authLink.concat(httpLink)\n)\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}