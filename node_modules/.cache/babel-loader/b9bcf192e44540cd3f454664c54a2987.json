{"ast":null,"code":"var _jsxFileName = \"/Users/madisonmccardle/PCA/javascipt/react/hacker-news-react-apollo/src/components/LinkList.js\";\nimport React, { Component } from 'react';\nimport Link from './Link';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nclass LinkList extends Component {\n  render() {\n    const FEED_QUERY = gql`\n      {\n        feed {\n          links {\n            id\n            createdAt\n            url\n            description\n          }\n        }\n      }\n    `;\n    return /*#__PURE__*/React.createElement(Query, {\n      query: FEED_QUERY,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }, ({\n      loading,\n      error,\n      data\n    }) => {\n      if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 31\n        }\n      }, \"Fetching\"); // loading: Is true as long as the request is still ongoing and the response hasn’t been received.\n\n      if (error) return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 29\n        }\n      }, \"Error\"); // error: In case the request fails, this field will contain information about what exactly went wrong.\n\n      const linksToRender = data.feed.links; // data: This is the actual data that was received from the server. It has the links property which represents a list of Link elements.\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }\n      }, linksToRender.map(link => /*#__PURE__*/React.createElement(Link, {\n        key: link.id,\n        link: link,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 42\n        }\n      })));\n    });\n  }\n\n}\n\nexport default LinkList;","map":{"version":3,"sources":["/Users/madisonmccardle/PCA/javascipt/react/hacker-news-react-apollo/src/components/LinkList.js"],"names":["React","Component","Link","Query","gql","LinkList","render","FEED_QUERY","loading","error","data","linksToRender","feed","links","map","link","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAC/BK,EAAAA,MAAM,GAAG;AACP,UAAMC,UAAU,GAAGH,GAAI;;;;;;;;;;;KAAvB;AAaA,wBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAEG,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,KAAD,KAA8B;AAC7B,UAAIF,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP,CADgB,CAE7B;;AACA,UAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP,CAHkB,CAI7B;;AACA,YAAME,aAAa,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAAhC,CAL6B,CAM7B;;AACA,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGF,aAAa,CAACG,GAAd,CAAkBC,IAAI,iBAAI,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAEA,IAAI,CAACC,EAAhB;AAAoB,QAAA,IAAI,EAAED,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA1B,CADH,CADF;AAKD,KAbH,CADF;AAiBD;;AAhC8B;;AAmCjC,eAAeV,QAAf","sourcesContent":["import React, { Component } from 'react'\nimport Link from './Link'\nimport { Query } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nclass LinkList extends Component {\n  render() {\n    const FEED_QUERY = gql`\n      {\n        feed {\n          links {\n            id\n            createdAt\n            url\n            description\n          }\n        }\n      }\n    `\n\n    return (\n      <Query query={FEED_QUERY}>\n        {({ loading, error, data }) => {\n          if (loading) return <div>Fetching</div>\n          // loading: Is true as long as the request is still ongoing and the response hasn’t been received.\n          if (error) return <div>Error</div>\n          // error: In case the request fails, this field will contain information about what exactly went wrong.\n          const linksToRender = data.feed.links\n          // data: This is the actual data that was received from the server. It has the links property which represents a list of Link elements.\n          return (\n            <div>\n              {linksToRender.map(link => <Link key={link.id} link={link} />)}\n            </div>\n          )\n        }}\n      </Query>\n    )\n  }\n}\n\nexport default LinkList\n"]},"metadata":{},"sourceType":"module"}