{"ast":null,"code":"var _jsxFileName = \"/Users/madisonmccardle/PCA/javascipt/react/hacker-news-react-apollo/src/components/LinkList.js\";\nimport React, { Component } from 'react';\nimport Link from './Link';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { LINKS_PER_PAGE } from '../constants';\nconst NEW_LINKS_SUBSCRIPTION = gql`\n  subscription {\n    newLink {\n      id\n      url\n      description\n      createdAt\n      postedBy {\n        id\n        name\n      }\n      votes {\n        id\n        user {\n          id\n        }\n      }\n    }\n  }\n`;\nconst NEW_VOTES_SUBSCRIPTION = gql`\n  subscription {\n    newVote {\n      id\n      link {\n        id\n        url\n        description\n        createdAt\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      user {\n        id\n      }\n    }\n  }\n`;\nexport const FEED_QUERY = gql`\n  query FeedQuery($first: Int, $skip: Int, $orderBy: LinkOrderByInput) {\n    feed(first: $first, skip: $skip, orderBy: $orderBy) {\n      links {\n        id\n        createdAt\n        url\n        description\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      count\n    }\n  }\n`; // create the JavaScript constant called FEED_QUERY that stores the query.\n// The gql function is used to parse the plain string that contains the GraphQL code.\n\nclass LinkList extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this._updateCacheAfterVote = (store, createVote, linkId) => {\n      const data = store.readQuery({\n        query: FEED_QUERY\n      }); // eading the current state of the cached data for the FEED_QUERY from the store\n\n      const votedLink = data.feed.links.find(link => link.id === linkId);\n      votedLink.votes = createVote.link.votes; // retrieving the link that the user just voted for from that list.\n      // You’re also manipulating that link by resetting its votes to the votes that were just returned by the server\n\n      store.writeQuery({\n        query: FEED_QUERY,\n        data\n      }); // take the modified data and write it back into the store\n    };\n\n    this._subscribeToNewLinks = subscribeToMore => {\n      subscribeToMore({\n        document: NEW_LINKS_SUBSCRIPTION,\n        // document: This represents the subscription query itself.\n        // In your case, the subscription will fire every time a new link is created.\n        updateQuery: (prev, {\n          subscriptionData\n        }) => {\n          if (!subscriptionData.data) return prev;\n          const newLink = subscriptionData.data.newLink;\n          const exists = prev.feed.links.find(({\n            id\n          }) => id === newLink.id);\n          if (exists) return prev;\n          return Object.assign({}, prev, {\n            feed: {\n              links: [newLink, ...prev.feed.links],\n              count: prev.feed.links.length + 1,\n              __typename: prev.feed.__typename\n            }\n          });\n        }\n      });\n    };\n\n    this._subscribeToNewVotes = subscribeToMore => {\n      subscribeToMore({\n        document: NEW_VOTES_SUBSCRIPTION\n      });\n    };\n\n    this._getQueryVariables = () => {\n      const isNewPage = this.props.location.pathname.includes('new');\n      const page = parseInt(this.props.match.params.page, 10);\n      const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0;\n      const first = isNewPage ? LINKS_PER_PAGE : 100;\n      const orderBy = isNewPage ? 'createdAt_DESC' : null;\n      return {\n        first,\n        skip,\n        orderBy\n      };\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Query, {\n      query: FEED_QUERY,\n      variables: this._getQueryVariables(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }\n    }, ({\n      loading,\n      error,\n      data,\n      subscribeToMore\n    }) => {\n      if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 31\n        }\n      }, \"Fetching\"); // loading: Is true as long as the request is still ongoing and the response hasn’t been received.\n\n      if (error) return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 29\n        }\n      }, \"Error\"); // error: In case the request fails, this field will contain information about what exactly went wrong.\n\n      this._subscribeToNewLinks(subscribeToMore); // using subscribeToMore received as prop into the component’s render prop function.\n      // Calling _subscribeToNewLinks with its respective subscribeToMore function you make sure that the component actually subscribes to the events.\n      // This call opens up a websocket connection to the subscription server\n\n\n      this._subscribeToNewVotes(subscribeToMore); // const linksToRender = data.feed.links\n      // data: This is the actual data that was received from the server. It has the links property which represents a list of Link elements.\n\n\n      const linksToRender = this._getLinksToRender(data);\n\n      const isNewPage = this.props.location.pathname.includes('new');\n      const pageIndex = this.props.match.params.page ? (this.props.match.params.page - 1) * LINKS_PER_PAGE : 0;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }\n      }, linksToRender.map((link, index) => /*#__PURE__*/React.createElement(Link, {\n        key: link.id,\n        link: link,\n        index: index,\n        updateStoreAfterVote: this._updateCacheAfterVote,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }\n      })));\n    });\n  }\n\n}\n\nexport default LinkList;","map":{"version":3,"sources":["/Users/madisonmccardle/PCA/javascipt/react/hacker-news-react-apollo/src/components/LinkList.js"],"names":["React","Component","Link","Query","gql","LINKS_PER_PAGE","NEW_LINKS_SUBSCRIPTION","NEW_VOTES_SUBSCRIPTION","FEED_QUERY","LinkList","_updateCacheAfterVote","store","createVote","linkId","data","readQuery","query","votedLink","feed","links","find","link","id","votes","writeQuery","_subscribeToNewLinks","subscribeToMore","document","updateQuery","prev","subscriptionData","newLink","exists","Object","assign","count","length","__typename","_subscribeToNewVotes","_getQueryVariables","isNewPage","props","location","pathname","includes","page","parseInt","match","params","skip","first","orderBy","render","loading","error","linksToRender","_getLinksToRender","pageIndex","map","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Link from './Link'\nimport { Query } from 'react-apollo'\nimport gql from 'graphql-tag'\nimport { LINKS_PER_PAGE } from '../constants'\n\nconst NEW_LINKS_SUBSCRIPTION = gql`\n  subscription {\n    newLink {\n      id\n      url\n      description\n      createdAt\n      postedBy {\n        id\n        name\n      }\n      votes {\n        id\n        user {\n          id\n        }\n      }\n    }\n  }\n`\nconst NEW_VOTES_SUBSCRIPTION = gql`\n  subscription {\n    newVote {\n      id\n      link {\n        id\n        url\n        description\n        createdAt\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      user {\n        id\n      }\n    }\n  }\n`\n\nexport const FEED_QUERY = gql`\n  query FeedQuery($first: Int, $skip: Int, $orderBy: LinkOrderByInput) {\n    feed(first: $first, skip: $skip, orderBy: $orderBy) {\n      links {\n        id\n        createdAt\n        url\n        description\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      count\n    }\n  }\n`\n\n// create the JavaScript constant called FEED_QUERY that stores the query.\n// The gql function is used to parse the plain string that contains the GraphQL code.\n\nclass LinkList extends Component {\n  _updateCacheAfterVote = (store, createVote, linkId) => {\n    const data = store.readQuery({ query: FEED_QUERY })\n    // eading the current state of the cached data for the FEED_QUERY from the store\n    const votedLink = data.feed.links.find(link => link.id === linkId)\n    votedLink.votes = createVote.link.votes\n    // retrieving the link that the user just voted for from that list.\n    // You’re also manipulating that link by resetting its votes to the votes that were just returned by the server\n    store.writeQuery({ query: FEED_QUERY, data })\n    // take the modified data and write it back into the store\n  }\n\n  _subscribeToNewLinks = subscribeToMore => {\n    subscribeToMore({\n      document: NEW_LINKS_SUBSCRIPTION,\n      // document: This represents the subscription query itself.\n      // In your case, the subscription will fire every time a new link is created.\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev\n        const newLink = subscriptionData.data.newLink\n        const exists = prev.feed.links.find(({ id }) => id === newLink.id);\n        if (exists) return prev;\n\n        return Object.assign({}, prev, {\n          feed: {\n            links: [newLink, ...prev.feed.links],\n            count: prev.feed.links.length + 1,\n            __typename: prev.feed.__typename\n          }\n        })\n      }\n    })\n  }\n  // updateQuery: Similar to cache update prop, this function allows you to determine how the store should be updated with the information that was sent by the server after the event occurred.\n  // In fact, it follows exactly the same principle as a Redux reducer: It takes as arguments the previous state (of the query that subscribeToMore was called on) and the subscription data that’s sent by the server.\n  // You can then determine how to merge the subscription data into the existing state and return the updated data.\n  // All you’re doing inside updateQuery is retrieving the new link from the received subscriptionData, merging it into the existing list of links and returning the result of this operation.\n\n  _subscribeToNewVotes = subscribeToMore => {\n    subscribeToMore({\n      document: NEW_VOTES_SUBSCRIPTION\n    })\n  }\n\n  _getQueryVariables = () => {\n    const isNewPage = this.props.location.pathname.includes('new')\n    const page = parseInt(this.props.match.params.page, 10)\n\n    const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0\n    const first = isNewPage ? LINKS_PER_PAGE : 100\n    const orderBy = isNewPage ? 'createdAt_DESC' : null\n    return { first, skip, orderBy }\n  }\n\n  render() {\n\n    return (\n      <Query\n        query={FEED_QUERY}\n        variables={this._getQueryVariables()}\n      >\n        {({ loading, error, data, subscribeToMore }) => {\n          if (loading) return <div>Fetching</div>\n          // loading: Is true as long as the request is still ongoing and the response hasn’t been received.\n          if (error) return <div>Error</div>\n          // error: In case the request fails, this field will contain information about what exactly went wrong.\n\n          this._subscribeToNewLinks(subscribeToMore)\n          // using subscribeToMore received as prop into the component’s render prop function.\n          // Calling _subscribeToNewLinks with its respective subscribeToMore function you make sure that the component actually subscribes to the events.\n          // This call opens up a websocket connection to the subscription server\n          this._subscribeToNewVotes(subscribeToMore)\n\n          // const linksToRender = data.feed.links\n          // data: This is the actual data that was received from the server. It has the links property which represents a list of Link elements.\n          const linksToRender = this._getLinksToRender(data)\n          const isNewPage = this.props.location.pathname.includes('new')\n          const pageIndex = this.props.match.params.page\n            ? (this.props.match.params.page - 1) * LINKS_PER_PAGE\n            : 0\n\n\n          return (\n            <div>\n              {linksToRender.map((link, index) => (\n                <Link\n                  key={link.id}\n                  link={link}\n                  index={index}\n                  updateStoreAfterVote={this._updateCacheAfterVote}\n                />\n              ))}\n            </div>\n          )\n        }}\n      </Query>\n    )\n  }\n}\n\nexport default LinkList\n"]},"metadata":{},"sourceType":"module"}