{"ast":null,"code":"var _jsxFileName = \"/Users/madisonmccardle/PCA/javascipt/react/hacker-news-react-apollo/src/components/LinkList.js\";\nimport React, { Component } from 'react';\nimport Link from './Link';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nclass LinkList extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this._updateCacheAfterVote = (store, createVote, linkId) => {\n      const data = store.readQuery({\n        query: FEED_QUERY\n      }); // eading the current state of the cached data for the FEED_QUERY from the store\n\n      const votedLink = data.feed.links.find(link => link.id === linkId);\n      votedLink.votes = createVote.link.votes;\n      store.writeQuery({\n        query: FEED_QUERY,\n        data\n      });\n    };\n  }\n\n  render() {\n    const FEED_QUERY = gql`\n      {\n        feed {\n          links {\n            id\n            createdAt\n            url\n            description\n            postedBy {\n              id\n              name\n            }\n            votes {\n              id\n              user {\n                id\n              }\n            }\n          }\n        }\n      }\n    `; // create the JavaScript constant called FEED_QUERY that stores the query.\n    // The gql function is used to parse the plain string that contains the GraphQL code.\n\n    return /*#__PURE__*/React.createElement(Query, {\n      query: FEED_QUERY,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, ({\n      loading,\n      error,\n      data\n    }) => {\n      if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 31\n        }\n      }, \"Fetching\"); // loading: Is true as long as the request is still ongoing and the response hasn’t been received.\n\n      if (error) return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 29\n        }\n      }, \"Error\"); // error: In case the request fails, this field will contain information about what exactly went wrong.\n\n      const linksToRender = data.feed.links; // data: This is the actual data that was received from the server. It has the links property which represents a list of Link elements.\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }\n      }, linksToRender.map((link, index) => /*#__PURE__*/React.createElement(Link, {\n        key: link.id,\n        link: link,\n        index: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      })));\n    });\n  }\n\n}\n\nexport default LinkList;","map":{"version":3,"sources":["/Users/madisonmccardle/PCA/javascipt/react/hacker-news-react-apollo/src/components/LinkList.js"],"names":["React","Component","Link","Query","gql","LinkList","_updateCacheAfterVote","store","createVote","linkId","data","readQuery","query","FEED_QUERY","votedLink","feed","links","find","link","id","votes","writeQuery","render","loading","error","linksToRender","map","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAAA;AAAA;;AAAA,SAC/BK,qBAD+B,GACP,CAACC,KAAD,EAAQC,UAAR,EAAoBC,MAApB,KAA+B;AACrD,YAAMC,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEC;AAAT,OAAhB,CAAb,CADqD,CAEzD;;AACI,YAAMC,SAAS,GAAGJ,IAAI,CAACK,IAAL,CAAUC,KAAV,CAAgBC,IAAhB,CAAqBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYV,MAAzC,CAAlB;AACAK,MAAAA,SAAS,CAACM,KAAV,GAAkBZ,UAAU,CAACU,IAAX,CAAgBE,KAAlC;AAEAb,MAAAA,KAAK,CAACc,UAAN,CAAiB;AAAET,QAAAA,KAAK,EAAEC,UAAT;AAAqBH,QAAAA;AAArB,OAAjB;AACD,KAR8B;AAAA;;AAU/BY,EAAAA,MAAM,GAAG;AACP,UAAMT,UAAU,GAAGT,GAAI;;;;;;;;;;;;;;;;;;;;;KAAvB,CADO,CAuBP;AACA;;AACA,wBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAES,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEG,CAAC;AAAEU,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBd,MAAAA;AAAlB,KAAD,KAA8B;AAC7B,UAAIa,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP,CADgB,CAE7B;;AACA,UAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP,CAHkB,CAI7B;;AACA,YAAMC,aAAa,GAAGf,IAAI,CAACK,IAAL,CAAUC,KAAhC,CAL6B,CAM7B;;AACA,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGS,aAAa,CAACC,GAAd,CAAkB,CAACR,IAAD,EAAOS,KAAP,kBACjB,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAET,IAAI,CAACC,EAAhB;AAAoB,QAAA,IAAI,EAAED,IAA1B;AAAgC,QAAA,KAAK,EAAES,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CADH,CADF;AAOD,KAhBH,CADF;AAoBD;;AAvD8B;;AA0DjC,eAAetB,QAAf","sourcesContent":["import React, { Component } from 'react'\nimport Link from './Link'\nimport { Query } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nclass LinkList extends Component {\n  _updateCacheAfterVote = (store, createVote, linkId) => {\n    const data = store.readQuery({ query: FEED_QUERY })\n// eading the current state of the cached data for the FEED_QUERY from the store\n    const votedLink = data.feed.links.find(link => link.id === linkId)\n    votedLink.votes = createVote.link.votes\n\n    store.writeQuery({ query: FEED_QUERY, data })\n  }\n\n  render() {\n    const FEED_QUERY = gql`\n      {\n        feed {\n          links {\n            id\n            createdAt\n            url\n            description\n            postedBy {\n              id\n              name\n            }\n            votes {\n              id\n              user {\n                id\n              }\n            }\n          }\n        }\n      }\n    `\n    // create the JavaScript constant called FEED_QUERY that stores the query.\n    // The gql function is used to parse the plain string that contains the GraphQL code.\n    return (\n      <Query query={FEED_QUERY}>\n\n        {({ loading, error, data }) => {\n          if (loading) return <div>Fetching</div>\n          // loading: Is true as long as the request is still ongoing and the response hasn’t been received.\n          if (error) return <div>Error</div>\n          // error: In case the request fails, this field will contain information about what exactly went wrong.\n          const linksToRender = data.feed.links\n          // data: This is the actual data that was received from the server. It has the links property which represents a list of Link elements.\n          return (\n            <div>\n              {linksToRender.map((link, index) => (\n                <Link key={link.id} link={link} index={index} />\n              ))}\n            </div>\n          )\n        }}\n      </Query>\n    )\n  }\n}\n\nexport default LinkList\n"]},"metadata":{},"sourceType":"module"}